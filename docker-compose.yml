services:
  app:
    image: alfakids:latest
    env_file:
      - .env # Isso garante que o Docker Compose carregue as variáveis do .env
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}  # Mapeie a porta usada pela aplicação
    environment:
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      FLASK_ENV: development
      SQLALCHEMY_DATABASE_URI: ${SQLALCHEMY_DATABASE_URI}
    depends_on:
      db:
        condition: service_healthy  # Espera o banco estar pronto

      chatbot:
        condition: service_started  # Apenas espera o container iniciar

    command: >
      sh -c "
      flask db upgrade &&
      python3 -m flask run --host=0.0.0.0"
    networks:
      - app-network

  # Postgres Service
  db:
    image: postgres:15
    container_name: postgres-container
    restart: always
    ports:
      - ${DB_PORT}:${DB_PORT}  # Porta do PostgreSQL
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Chatbot Service
  chatbot:
    image: chatbot:latest
    container_name: chatbot
    ports:
      - ${CHATBOT_PORT}:${CHATBOT_PORT}  # Porta para o servidor HTTP do Rasa
    networks:
      - app-network
    command: ["rasa", "run", "--enable-api", "--cors", "*"]
  
volumes:
  postgres-data:
    driver: local

networks:
  app-network:
    driver: bridge